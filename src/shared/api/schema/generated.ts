/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/sections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of sections */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of sections */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SectionList"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sections/{sectionNumber}/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a list of units */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Section Number */
                    sectionNumber: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of units */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnitList"];
                    };
                };
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sections/{sectionNumber}/units/{unitNumber}/lessons/{lessonNumber}/variants/{variantNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a variant */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Section Number */
                    sectionNumber: string;
                    /** @description Unit Number */
                    unitNumber: string;
                    /** @description Lesson Number */
                    lessonNumber: string;
                    /** @description Variant Number */
                    variantNumber: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A variant */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Variant"];
                    };
                };
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Section: {
            /** @description Unique identifier for the section */
            id: string;
            /** @description Section number */
            number: number;
            /** @description Title of the section */
            title: string;
            /** @description Progress percentage of the section (0 to 100) */
            progress: number;
        };
        SectionList: components["schemas"]["Section"][];
        Lesson: {
            /** @description Unique identifier for the lesson */
            id: string;
            /** @description Lesson number */
            number: number;
            /** @description Total number of variants in the lesson */
            totalVariants: number;
        };
        Unit: {
            /** @description Unique identifier for the unit */
            id: string;
            /** @description Unit number */
            number: number;
            /** @description Title of the unit */
            title: string;
            /** @description Description of the unit */
            description: string;
            /** @description Section number of the unit */
            sectionNumber: number;
            lessons: components["schemas"]["Lesson"][];
        };
        UnitList: components["schemas"]["Unit"][];
        Error: {
            message: string;
            code: string;
        };
        TaskBase: {
            /** @description Number of task */
            number: number;
            /**
             * @description Type of task
             * @enum {string}
             */
            type: "listen-and-write-all" | "translate-all" | "write-part" | "listen-and-place-in-order" | "select-word-by-image";
            results?: string[];
        };
        Word: {
            id: string;
            text: string;
            translations: string[];
        };
        TaskListenAndWriteAll: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            type: "listen-and-write-all";
            text: components["schemas"]["Word"][];
            translation: string;
            results: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "listen-and-write-all";
        };
        TaskTranslateAll: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            type: "translate-all";
            text: components["schemas"]["Word"][];
            translation: string;
            results: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "translate-all";
        };
        WordInput: {
            id: string;
            text: string;
            input: boolean;
            translations: string[];
        };
        TaskWritePart: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            type: "write-part";
            text: (components["schemas"]["Word"] | components["schemas"]["WordInput"])[];
            translation: string;
            results: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "write-part";
        };
        TaskListenAndPlaceInOrder: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            type: "listen-and-place-in-order";
            text: components["schemas"]["Word"][];
            translation: string;
            results: string[];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "listen-and-place-in-order";
        };
        WordImg: {
            id: string;
            text: string;
            img: string;
        };
        TaskSelectWordByImage: components["schemas"]["TaskBase"] & {
            /** @enum {string} */
            type: "select-word-by-image";
            words: components["schemas"]["WordImg"][];
            result: string;
            wordToGuess: components["schemas"]["Word"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "select-word-by-image";
        };
        Task: components["schemas"]["TaskListenAndWriteAll"] | components["schemas"]["TaskTranslateAll"] | components["schemas"]["TaskWritePart"] | components["schemas"]["TaskListenAndPlaceInOrder"] | components["schemas"]["TaskSelectWordByImage"];
        Variant: {
            /** @description Unique identifier for the variant */
            id: string;
            /** @description Variant number */
            number: number;
            /** @description Lesson number of the variant */
            lessonNumber: number;
            /** @description Section number of the variant */
            sectionNumber: number;
            /** @description Unit number of the variant */
            unitNumber: number;
            tasks: components["schemas"]["Task"][];
        };
    };
    responses: {
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
